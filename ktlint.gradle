apply plugin: 'io.gitlab.arturbosch.detekt'
//configurations {
//    ktlint
//}

dependencies {
//    ktlint "com.shizhuang.duapp.thirdparty:ktlint-rule:1.0.3@jar"
//    ktlint "com.pinterest:ktlint:0.37.2"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.10.0"

    // additional 3rd party ruleset(s) can be specified here
    // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
    // ktlint will pick them up
}

//task ktlint(type: JavaExec, group: "verification") {
//    description = "Check Kotlin code style."
//    classpath = configurations.ktlint
//    main = "com.pinterest.ktlint.Main"
//    args "src/**/*.kt"
//    // to generate report in checkstyle format prepend following args:
//    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
//    // see https://github.com/pinterest/ktlint#usage for more
//}
//
//task ktlintFormat(type: JavaExec, group: "formatting") {
//    description = "Fix Kotlin code style deviations."
//    classpath = configurations.ktlint
//    main = "com.pinterest.ktlint.Main"
//    args "-F", "src/**/*.kt"
//}

detekt {
    failFast = true // fail build on any finding
    buildUponDefaultConfig = true // preconfigure defaults
    String baseDir = rootProject.projectDir
    baseline = file("$baseDir/config/detekt/my-detekt-baseline.xml")
    config = files("$baseDir/config/detekt/default-detekt-config.yml")
    reports {
        html.enabled = true // observe findings in your browser with structure and code snippets
        xml.enabled = false // checkstyle like format mainly for integrations like Jenkins
        txt.enabled = false // similar to the console output, contains issue signature to manually edit baseline files
    }
}
